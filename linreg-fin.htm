
<!-- saved from url=(0064)https://mimno.github.io/info3300-spr2017/Notes/032017/index.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>INFO 3300 - Data-driven Web Applications</title>
<link href="./linreg-fin_files/css" rel="stylesheet">
<link rel="stylesheet" href="./linreg-fin_files/default.min.css">
<script src="./linreg-fin_files/d3.v4.min.js"></script><style></style>
<script src="./linreg-fin_files/highlight.min.js"></script>
<style>
body { font-family: 'Slabo 27px', Calibri, sans-serif; }
svg { border: solid #ccc 1px; }
input.slider { width: 300px; }
</style>
<style id="style-1-cropbar-clipper">/* Copyright 2014 Evernote Corporation. All rights reserved. */
.en-markup-crop-options {
    top: 18px !important;
    left: 50% !important;
    margin-left: -100px !important;
    width: 200px !important;
    border: 2px rgba(255,255,255,.38) solid !important;
    border-radius: 4px !important;
}

.en-markup-crop-options div div:first-of-type {
    margin-left: 0px !important;
}
</style></head>
<body>
<h3>Notes for Monday, March 20</h3>

<div>
<ul>
	<li>Reflections on <a href="https://medium.com/@dominikus/the-end-of-interactive-visualizations-52c585dcafcb#.a2futdtt4">the death of interactive graphics</a>. What do you think?</li>
	<li>Fun: <a href="http://codepen.io/nerdmanship/full/xgmBKg/">Miyazaki tribute in SVG/JS</a>. Can you figure out how it works?</li>
	<li>For today: What factors influence <a href="https://en.wikipedia.org/wiki/Programme_for_International_Student_Assessment">International Math test scores</a>?</li>
</ul>
</div>

<p>
	Our goal is to interactively optimize a linear regression that predicts the
	<a href="https://en.wikipedia.org/wiki/Programme_for_International_Student_Assessment">2015 PISA math results</a>
	based on a set of four country-level statistics: 
	<a href="https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)_per_capita">per capita GDP</a> from IMF, 
	<a href="https://en.wikipedia.org/wiki/List_of_countries_by_income_equality">income inequality</a> from the World Bank,
	the <a href="https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index">Human Development Index</a> from the UN, 
	and <a href="https://en.wikipedia.org/wiki/List_of_countries_by_spending_on_education_(%25_of_GDP)">Education spending as a percentage of GDP</a> from the World Bank.
	I collected tab-delimited data files for each of these statistics by copying and pasting HTML tables from Wikipedia into text files.
</p>

<p>Use the sliders to set regression parameters. The best I've been able to get is around 84k squared error.</p>

<div id="plot"><svg height="480" width="480"><g transform="translate(40,40)"><g fill="none" font-size="10" font-family="sans-serif" text-anchor="middle" transform="translate(0, 400)"><path class="domain" stroke="#000" d="M0.5,6V0.5H400.5V6"></path><g class="tick" opacity="1" transform="translate(0.5,0)"><line stroke="#000" y2="6"></line><text fill="#000" y="9" dy="0.71em">200</text></g><g class="tick" opacity="1" transform="translate(50.5,0)"><line stroke="#000" y2="6"></line><text fill="#000" y="9" dy="0.71em">250</text></g><g class="tick" opacity="1" transform="translate(100.5,0)"><line stroke="#000" y2="6"></line><text fill="#000" y="9" dy="0.71em">300</text></g><g class="tick" opacity="1" transform="translate(150.5,0)"><line stroke="#000" y2="6"></line><text fill="#000" y="9" dy="0.71em">350</text></g><g class="tick" opacity="1" transform="translate(200.5,0)"><line stroke="#000" y2="6"></line><text fill="#000" y="9" dy="0.71em">400</text></g><g class="tick" opacity="1" transform="translate(250.5,0)"><line stroke="#000" y2="6"></line><text fill="#000" y="9" dy="0.71em">450</text></g><g class="tick" opacity="1" transform="translate(300.5,0)"><line stroke="#000" y2="6"></line><text fill="#000" y="9" dy="0.71em">500</text></g><g class="tick" opacity="1" transform="translate(350.5,0)"><line stroke="#000" y2="6"></line><text fill="#000" y="9" dy="0.71em">550</text></g><g class="tick" opacity="1" transform="translate(400.5,0)"><line stroke="#000" y2="6"></line><text fill="#000" y="9" dy="0.71em">600</text></g></g><text x="200" y="435">Predicted PISA</text><g fill="none" font-size="10" font-family="sans-serif" text-anchor="end"><path class="domain" stroke="#000" d="M-6,400.5H0.5V0.5H-6"></path><g class="tick" opacity="1" transform="translate(0,400.5)"><line stroke="#000" x2="-6"></line><text fill="#000" x="-9" dy="0.32em">200</text></g><g class="tick" opacity="1" transform="translate(0,350.5)"><line stroke="#000" x2="-6"></line><text fill="#000" x="-9" dy="0.32em">250</text></g><g class="tick" opacity="1" transform="translate(0,300.5)"><line stroke="#000" x2="-6"></line><text fill="#000" x="-9" dy="0.32em">300</text></g><g class="tick" opacity="1" transform="translate(0,250.5)"><line stroke="#000" x2="-6"></line><text fill="#000" x="-9" dy="0.32em">350</text></g><g class="tick" opacity="1" transform="translate(0,200.5)"><line stroke="#000" x2="-6"></line><text fill="#000" x="-9" dy="0.32em">400</text></g><g class="tick" opacity="1" transform="translate(0,150.5)"><line stroke="#000" x2="-6"></line><text fill="#000" x="-9" dy="0.32em">450</text></g><g class="tick" opacity="1" transform="translate(0,100.5)"><line stroke="#000" x2="-6"></line><text fill="#000" x="-9" dy="0.32em">500</text></g><g class="tick" opacity="1" transform="translate(0,50.5)"><line stroke="#000" x2="-6"></line><text fill="#000" x="-9" dy="0.32em">550</text></g><g class="tick" opacity="1" transform="translate(0,0.5)"><line stroke="#000" x2="-6"></line><text fill="#000" x="-9" dy="0.32em">600</text></g></g><text transform="rotate(270)" x="-200" y="-25">Actual PISA</text><line class="estimated" x1="0" y1="400" x2="400" y2="0" style="stroke: rgb(228, 26, 28);"></line><text></text><text id="status" x="10" y="30">Squared Error: 1.7919e+5</text><circle r="5" cx="261.6539478452623" cy="36" style="opacity: 0.4;"></circle><circle r="5" cx="261.65576419745594" cy="52" style="opacity: 0.4;"></circle><circle r="5" cx="261.4847998470283" cy="68" style="opacity: 0.4;"></circle><circle r="5" cx="261.4327783822653" cy="69" style="opacity: 0.4;"></circle><circle r="5" cx="261.4946083196195" cy="76" style="opacity: 0.4;"></circle><circle r="5" cx="261.48727290772257" cy="79" style="opacity: 0.4;"></circle><circle r="5" cx="261.4899422820361" cy="80" style="opacity: 0.4;"></circle><circle r="5" cx="261.48031489090846" cy="84" style="opacity: 0.4;"></circle><circle r="5" cx="261.51299581451553" cy="88" style="opacity: 0.4;"></circle><circle r="5" cx="261.5156723313103" cy="89" style="opacity: 0.4;"></circle><circle r="5" cx="261.5211436896587" cy="89" style="opacity: 0.4;"></circle><circle r="5" cx="261.5299227334737" cy="90" style="opacity: 0.4;"></circle><circle r="5" cx="261.5179651409833" cy="93" style="opacity: 0.4;"></circle><circle r="5" cx="261.49876301160305" cy="94" style="opacity: 0.4;"></circle><circle r="5" cx="261.494649946659" cy="96" style="opacity: 0.4;"></circle><circle r="5" cx="261.4882263962471" cy="96" style="opacity: 0.4;"></circle><circle r="5" cx="261.5240911078349" cy="98" style="opacity: 0.4;"></circle><circle r="5" cx="261.4995801455" cy="103" style="opacity: 0.4;"></circle><circle r="5" cx="261.4739423891197" cy="105" style="opacity: 0.4;"></circle><circle r="5" cx="261.4768287672953" cy="105" style="opacity: 0.4;"></circle><circle r="5" cx="261.44287827186656" cy="106" style="opacity: 0.4;"></circle><circle r="5" cx="261.5196046949129" cy="106" style="opacity: 0.4;"></circle><circle r="5" cx="261.47118504838886" cy="106" style="opacity: 0.4;"></circle><circle r="5" cx="261.48605841754926" cy="107" style="opacity: 0.4;"></circle><circle r="5" cx="261.48660311330747" cy="108" style="opacity: 0.4;"></circle><circle r="5" cx="261.52288114576646" cy="108" style="opacity: 0.4;"></circle><circle r="5" cx="261.4746022892888" cy="108" style="opacity: 0.4;"></circle><circle r="5" cx="261.4711424433149" cy="110" style="opacity: 0.4;"></circle><circle r="5" cx="261.5246885510836" cy="112" style="opacity: 0.4;"></circle><circle r="5" cx="261.4698400718294" cy="114" style="opacity: 0.4;"></circle><circle r="5" cx="261.4656546074654" cy="114" style="opacity: 0.4;"></circle><circle r="5" cx="261.47667361538527" cy="118" style="opacity: 0.4;"></circle><circle r="5" cx="261.6673708822845" cy="121" style="opacity: 0.4;"></circle><circle r="5" cx="261.47937993664874" cy="122" style="opacity: 0.4;"></circle><circle r="5" cx="261.5035297924738" cy="123" style="opacity: 0.4;"></circle><circle r="5" cx="261.52361384181347" cy="125" style="opacity: 0.4;"></circle><circle r="5" cx="261.4340873156392" cy="130" style="opacity: 0.4;"></circle><circle r="5" cx="261.43885373081554" cy="130" style="opacity: 0.4;"></circle><circle r="5" cx="261.4941606824632" cy="136" style="opacity: 0.4;"></circle><circle r="5" cx="261.5210064759342" cy="140" style="opacity: 0.4;"></circle><circle r="5" cx="261.4648615937715" cy="146" style="opacity: 0.4;"></circle><circle r="5" cx="261.420912122238" cy="154" style="opacity: 0.4;"></circle><circle r="5" cx="261.52107599493553" cy="156" style="opacity: 0.4;"></circle><circle r="5" cx="261.4752859483779" cy="159" style="opacity: 0.4;"></circle><circle r="5" cx="261.4880397976319" cy="163" style="opacity: 0.4;"></circle><circle r="5" cx="261.64906419478615" cy="173" style="opacity: 0.4;"></circle><circle r="5" cx="261.3920498316393" cy="177" style="opacity: 0.4;"></circle><circle r="5" cx="261.4463280056049" cy="179.99999999999997" style="opacity: 0.4;"></circle><circle r="5" cx="261.5412943522697" cy="179.99999999999997" style="opacity: 0.4;"></circle><circle r="5" cx="261.4351835456079" cy="181.99999999999997" style="opacity: 0.4;"></circle><circle r="5" cx="261.4446063517335" cy="183" style="opacity: 0.4;"></circle><circle r="5" cx="261.4649412455249" cy="185" style="opacity: 0.4;"></circle><circle r="5" cx="261.51415377003497" cy="187" style="opacity: 0.4;"></circle><circle r="5" cx="261.4399469889941" cy="191" style="opacity: 0.4;"></circle><circle r="5" cx="261.41146606803244" cy="192" style="opacity: 0.4;"></circle><circle r="5" cx="261.4525004822822" cy="196" style="opacity: 0.4;"></circle><circle r="5" cx="261.4265603247491" cy="198" style="opacity: 0.4;"></circle><circle r="5" cx="261.4125000085693" cy="200" style="opacity: 0.4;"></circle><circle r="5" cx="261.6584841134971" cy="204" style="opacity: 0.4;"></circle><circle r="5" cx="261.38283410689314" cy="210" style="opacity: 0.4;"></circle><circle r="5" cx="261.4267710794609" cy="213" style="opacity: 0.4;"></circle><circle r="5" cx="261.4777771626667" cy="214" style="opacity: 0.4;"></circle><circle r="5" cx="261.48511168360716" cy="220" style="opacity: 0.4;"></circle><circle r="5" cx="261.3959350173955" cy="223" style="opacity: 0.4;"></circle><circle r="5" cx="261.4878730165318" cy="233" style="opacity: 0.4;"></circle><circle r="5" cx="261.4832149086372" cy="240" style="opacity: 0.4;"></circle><circle r="5" cx="261.40855701033814" cy="272" style="opacity: 0.4;"></circle></g></svg><div style="float: right;"><div>Intercept<div><input type="range" class="slider" min="161.71641791044777" max="761.7164179104477" step="2" value="461.7164179104478"></div></div><div>Income<div><input type="range" class="slider" min="-31.17770449955441" max="31.17770449955441" step="0.6235540899910882" value="-0.006460524513438441"></div></div><div>Inequality<div><input type="range" class="slider" min="-2.586068605560731" max="2.586068605560731" step="0.051721372111214615" value="-0.00542711734553982"></div></div><div>EduSpend<div><input type="range" class="slider" min="-18.70155900378231" max="18.70155900378231" step="0.37403118007564623" value="0.003631852142311467"></div></div><div>HDI<div><input type="range" class="slider" min="-405.80725764421845" max="405.80725764421845" step="8.11614515288437" value="-0.004595343842278793"></div></div></div></div>

<p>
	We encountered several problems while integrating these data sources. These are all typical of real data science curation issues. Here's a summary:
	</p><ul>
		<li>Identifiers: the country name field has a leading space in many cases. Calling <tt>.trim()</tt> on strings is a good idea.</li>
		<li>Identifiers: The GDP file listed South Korea as Korea, South. We decided to fix this by editing the data file. Macedonia also appeared in different forms.</li>
		<li>Missing values: Kosovo and Montenegro were missing from some files. Macau and Taiwan were also incomplete. We decided to drop these.</li>
		<li>Number formats: The GDP file included commas for human readability. We used a regular expression to remove them.</li>
		<li>Scale: per capita GDP has large variance and is on a completely different scale from all other variables. We substituted the log of this value.</li>
		<li>Data provenance: Do we really trust these variables?</li>
		<li>Politics: How accurate are these tests? Are test-takers a representative sample?</li>
		<li>Sample size: outliers tend to be small islands (Singapore, DR). If we picked comparable sized regions from larger countries (e.g. Massachusetts), would we get more variability?</li>
<p></p>

<script id="notes">

var height = 400;
var width = 400;
var padding = 40;

var svg = d3.select("#plot").append("svg")
.attr("height", height + 2 * padding).attr("width", width + 2 * padding)
.append("g").attr("transform", "translate(" + padding + "," + padding + ")");

// What are the largest and smallest data values?
var extent = [200, 600];

var xScale = d3.scaleLinear().domain(extent).range([0, width]);
var yScale = d3.scaleLinear().domain(extent).range([height, 0]);

var xAxis = d3.axisBottom(xScale);
svg.append("g").call(xAxis).attr("transform", "translate(0, "+ (height) + ")");
svg.append("text").attr("x", width / 2).attr("y", height + 35).text("Predicted PISA");

var yAxis = d3.axisLeft(yScale);
svg.append("g").call(yAxis);
svg.append("text").attr("transform", "rotate(270)")
.attr("x", -width / 2).attr("y", -25).text("Actual PISA");

var identityLine = svg.append("line")
.attr("class", "estimated")
.attr("x1", xScale(extent[0]))
.attr("y1", yScale(extent[0]))
.attr("x2", xScale(extent[1]))
.attr("y2", yScale(extent[1]))
.style("stroke", "#e41a1c");

var label = svg.append("text");

var normalGenerator = d3.randomNormal();

var points = [];

var predictedVariable = "PISA";
var inputVariables = ["Income", "Inequality", "EduSpend", "HDI"];
var variableMean = {};
var variableStdDev = {};

var randomModel = function () {
	var model = { intercept: 0.0 };
	
	inputVariables.forEach(function (variable) {
		model[variable] = normalGenerator() * 0.01;
	});
	
	return model;
}

var model = randomModel();

// Get the "residual", or difference between observed value and predicted value
function calculateErrors(points, model) {
	points.forEach(function (point) {
		// Y = ... + b
		point["prediction"] = model.intercept;
		inputVariables.forEach(function (variable) {
			// Y = mx...
			point["prediction"] += model[variable] * point[variable];
		});
		// Real Y - our current guess
		point.error = point[predictedVariable] - point["prediction"];
	});
}

// Display the squared loss criterion
function squaredError() {
	return d3.sum(points, function (point) {
		return point.error * point.error;
	});
}

var lossFunction = squaredError;
var rounder = d3.format(".5g");

var modelText = svg.append("text")
.attr("id", "status")
.attr("x", 10).attr("y", 30)
.text("Squared Error: " +
rounder(lossFunction()));

// Save data values outside the callback function. (Useful for debugging.)
var pisa, gdp, education, gini, hdi;

d3.queue()
.defer(d3.tsv, "pisa.txt")
.defer(d3.tsv, "gdp.txt")
.defer(d3.tsv, "education.txt")
.defer(d3.tsv, "gini.txt")
.defer(d3.tsv, "hdi.txt")
.await(function (error, _pisa, _gdp, _education, _gini, _hdi) {
	points = [];
	gdp = d3.nest().key(function (d) {
		return d.Country.trim(); }).map(_gdp);
	education = d3.nest().key(function (d) { return d.Country.trim(); }).map(_education);
	gini = d3.nest().key(function (d) { return d.Country.trim(); }).map(_gini);
	hdi = d3.nest().key(function (d) { return d.Country.trim(); }).map(_hdi);
	
	_pisa.forEach(function (country) {
		var countryName = country.Country.trim();
		try {
			country["PISA"] = Number(country["PISA"]);
			country["Income"] = Math.log(Number(gdp.get(countryName)[0]["GDP"].replace(/,/g, "")));
			country["EduSpend"] = Number(education.get(countryName)[0]["Education"]);
			country["Inequality"] = Number(gini.get(countryName)[0]["WBGini"]);
			country["HDI"] = Number(hdi.get(countryName)[0]["HDI"]);
			
			points.push(country);
		} catch (error) { 
			console.log(error);
			console.log("problem with " + countryName);
		}
	});
	
	model.intercept = d3.mean(points, function (d) { return d[predictedVariable]; });
	
	var slidersDiv = d3.select("#plot").append("div")
	.style("float", "right");
	
	slidersDiv
	.append("div").text("Intercept")
	.append("div")
	.append("input").attr("type", "range").attr("class", "slider")
	.attr("min", model.intercept - 300)
	.attr("max", model.intercept + 300).attr("step", 2)
	.attr("value", model.intercept)
	.on("input", function () {
		model.intercept = Number(this.value);
		display();
	});
	
	inputVariables.forEach(function (variable) {
		variableMean[variable] = d3.mean(points, function (d) { return d[variable]; });
		variableStdDev[variable] = d3.deviation(points, function (d) { return d[variable]; });
		
		var varMin = -30 / variableStdDev[variable];
		var varMax = 30 / variableStdDev[variable];
		var step = (varMax - varMin) / 100;
		slidersDiv
		.append("div").text(variable)
		.append("div")
		.append("input").attr("type", "range").attr("class", "slider")
		.attr("min", varMin).attr("max", varMax).attr("step", step).attr("value", model[variable])
		.on("input", function () {
			model[variable] = Number(this.value);
			display();
		});
	});
	
	display();
});

function display() {
	calculateErrors(points, model);

	var circles = svg.selectAll("circle").data(points);
	
	circles.enter()
	.append("circle")
	.merge(circles)
	.attr("r", 5)
	.on("click", function (d) {
		label.attr("x", xScale(d["prediction"]))
		.attr("y", yScale(d[predictedVariable]))
		.text(d.Country);
	})
	.style("opacity", 0.4)
	.attr("cx", function (d) { return xScale(d["prediction"]); })
	.attr("cy", function (d) { return yScale(d[predictedVariable]); });

	modelText
	.text("Squared Error: " + rounder(lossFunction()));	
}

</script>

<!-- This block will be automatically filled with syntax-highlighted code from the script below -->
<pre><code id="display" class="hljs http">

<span class="javascript"><span class="hljs-keyword">var</span> height = <span class="hljs-number">400</span>;
<span class="hljs-keyword">var</span> width = <span class="hljs-number">400</span>;
<span class="hljs-keyword">var</span> padding = <span class="hljs-number">40</span>;

<span class="hljs-keyword">var</span> svg = d3.select(<span class="hljs-string">"#plot"</span>).append(<span class="hljs-string">"svg"</span>)
.attr(<span class="hljs-string">"height"</span>, height + <span class="hljs-number">2</span> * padding).attr(<span class="hljs-string">"width"</span>, width + <span class="hljs-number">2</span> * padding)
.append(<span class="hljs-string">"g"</span>).attr(<span class="hljs-string">"transform"</span>, <span class="hljs-string">"translate("</span> + padding + <span class="hljs-string">","</span> + padding + <span class="hljs-string">")"</span>);

<span class="hljs-comment">// What are the largest and smallest data values?</span>
<span class="hljs-keyword">var</span> extent = [<span class="hljs-number">200</span>, <span class="hljs-number">600</span>];

<span class="hljs-keyword">var</span> xScale = d3.scaleLinear().domain(extent).range([<span class="hljs-number">0</span>, width]);
<span class="hljs-keyword">var</span> yScale = d3.scaleLinear().domain(extent).range([height, <span class="hljs-number">0</span>]);

<span class="hljs-keyword">var</span> xAxis = d3.axisBottom(xScale);
svg.append(<span class="hljs-string">"g"</span>).call(xAxis).attr(<span class="hljs-string">"transform"</span>, <span class="hljs-string">"translate(0, "</span>+ (height) + <span class="hljs-string">")"</span>);
svg.append(<span class="hljs-string">"text"</span>).attr(<span class="hljs-string">"x"</span>, width / <span class="hljs-number">2</span>).attr(<span class="hljs-string">"y"</span>, height + <span class="hljs-number">35</span>).text(<span class="hljs-string">"Predicted PISA"</span>);

<span class="hljs-keyword">var</span> yAxis = d3.axisLeft(yScale);
svg.append(<span class="hljs-string">"g"</span>).call(yAxis);
svg.append(<span class="hljs-string">"text"</span>).attr(<span class="hljs-string">"transform"</span>, <span class="hljs-string">"rotate(270)"</span>)
.attr(<span class="hljs-string">"x"</span>, -width / <span class="hljs-number">2</span>).attr(<span class="hljs-string">"y"</span>, <span class="hljs-number">-25</span>).text(<span class="hljs-string">"Actual PISA"</span>);

<span class="hljs-keyword">var</span> identityLine = svg.append(<span class="hljs-string">"line"</span>)
.attr(<span class="hljs-string">"class"</span>, <span class="hljs-string">"estimated"</span>)
.attr(<span class="hljs-string">"x1"</span>, xScale(extent[<span class="hljs-number">0</span>]))
.attr(<span class="hljs-string">"y1"</span>, yScale(extent[<span class="hljs-number">0</span>]))
.attr(<span class="hljs-string">"x2"</span>, xScale(extent[<span class="hljs-number">1</span>]))
.attr(<span class="hljs-string">"y2"</span>, yScale(extent[<span class="hljs-number">1</span>]))
.style(<span class="hljs-string">"stroke"</span>, <span class="hljs-string">"#e41a1c"</span>);

<span class="hljs-keyword">var</span> label = svg.append(<span class="hljs-string">"text"</span>);

<span class="hljs-keyword">var</span> normalGenerator = d3.randomNormal();

<span class="hljs-keyword">var</span> points = [];

<span class="hljs-keyword">var</span> predictedVariable = <span class="hljs-string">"PISA"</span>;
<span class="hljs-keyword">var</span> inputVariables = [<span class="hljs-string">"Income"</span>, <span class="hljs-string">"Inequality"</span>, <span class="hljs-string">"EduSpend"</span>, <span class="hljs-string">"HDI"</span>];
<span class="hljs-keyword">var</span> variableMean = {};
<span class="hljs-keyword">var</span> variableStdDev = {};

<span class="hljs-keyword">var</span> randomModel = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
	<span class="hljs-keyword">var</span> model = { <span class="hljs-attr">intercept</span>: <span class="hljs-number">0.0</span> };
	
	inputVariables.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">variable</span>) </span>{
		model[variable] = normalGenerator() * <span class="hljs-number">0.01</span>;
	});
	
	<span class="hljs-keyword">return</span> model;
}

<span class="hljs-keyword">var</span> model = randomModel();

<span class="hljs-comment">// Get the "residual", or difference between observed value and predicted value</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateErrors</span>(<span class="hljs-params">points, model</span>) </span>{
	points.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">point</span>) </span>{
		<span class="hljs-comment">// Y = ... + b</span>
		point[<span class="hljs-string">"prediction"</span>] = model.intercept;
		inputVariables.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">variable</span>) </span>{
			<span class="hljs-comment">// Y = mx...</span>
			point[<span class="hljs-string">"prediction"</span>] += model[variable] * point[variable];
		});
		<span class="hljs-comment">// Real Y - our current guess</span>
		point.error = point[predictedVariable] - point[<span class="hljs-string">"prediction"</span>];
	});
}

<span class="hljs-comment">// Display the squared loss criterion</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">squaredError</span>(<span class="hljs-params"></span>) </span>{
	<span class="hljs-keyword">return</span> d3.sum(points, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">point</span>) </span>{
		<span class="hljs-keyword">return</span> point.error * point.error;
	});
}

<span class="hljs-keyword">var</span> lossFunction = squaredError;
<span class="hljs-keyword">var</span> rounder = d3.format(<span class="hljs-string">".5g"</span>);

<span class="hljs-keyword">var</span> modelText = svg.append(<span class="hljs-string">"text"</span>)
.attr(<span class="hljs-string">"id"</span>, <span class="hljs-string">"status"</span>)
.attr(<span class="hljs-string">"x"</span>, <span class="hljs-number">10</span>).attr(<span class="hljs-string">"y"</span>, <span class="hljs-number">30</span>)
.text(<span class="hljs-string">"Squared Error: "</span> +
rounder(lossFunction()));

<span class="hljs-comment">// Save data values outside the callback function. (Useful for debugging.)</span>
<span class="hljs-keyword">var</span> pisa, gdp, education, gini, hdi;

d3.queue()
.defer(d3.tsv, <span class="hljs-string">"pisa.txt"</span>)
.defer(d3.tsv, <span class="hljs-string">"gdp.txt"</span>)
.defer(d3.tsv, <span class="hljs-string">"education.txt"</span>)
.defer(d3.tsv, <span class="hljs-string">"gini.txt"</span>)
.defer(d3.tsv, <span class="hljs-string">"hdi.txt"</span>)
.await(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, _pisa, _gdp, _education, _gini, _hdi</span>) </span>{
	points = [];
	gdp = d3.nest().key(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>{
		<span class="hljs-keyword">return</span> d.Country.trim(); }).map(_gdp);
	education = d3.nest().key(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>{ <span class="hljs-keyword">return</span> d.Country.trim(); }).map(_education);
	gini = d3.nest().key(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>{ <span class="hljs-keyword">return</span> d.Country.trim(); }).map(_gini);
	hdi = d3.nest().key(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>{ <span class="hljs-keyword">return</span> d.Country.trim(); }).map(_hdi);
	
	_pisa.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">country</span>) </span>{
		<span class="hljs-keyword">var</span> countryName = country.Country.trim();
		<span class="hljs-keyword">try</span> {
			country[<span class="hljs-string">"PISA"</span>] = <span class="hljs-built_in">Number</span>(country[<span class="hljs-string">"PISA"</span>]);
			country[<span class="hljs-string">"Income"</span>] = <span class="hljs-built_in">Math</span>.log(<span class="hljs-built_in">Number</span>(gdp.get(countryName)[<span class="hljs-number">0</span>][<span class="hljs-string">"GDP"</span>].replace(<span class="hljs-regexp">/,/g</span>, <span class="hljs-string">""</span>)));
			country[<span class="hljs-string">"EduSpend"</span>] = <span class="hljs-built_in">Number</span>(education.get(countryName)[<span class="hljs-number">0</span>][<span class="hljs-string">"Education"</span>]);
			country[<span class="hljs-string">"Inequality"</span>] = <span class="hljs-built_in">Number</span>(gini.get(countryName)[<span class="hljs-number">0</span>][<span class="hljs-string">"WBGini"</span>]);
			country[<span class="hljs-string">"HDI"</span>] = <span class="hljs-built_in">Number</span>(hdi.get(countryName)[<span class="hljs-number">0</span>][<span class="hljs-string">"HDI"</span>]);
			
			points.push(country);
		} <span class="hljs-keyword">catch</span> (error) { 
			<span class="hljs-built_in">console</span>.log(error);
			<span class="hljs-built_in">console</span>.log(<span class="hljs-string">"problem with "</span> + countryName);
		}
	});
	
	model.intercept = d3.mean(points, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>{ <span class="hljs-keyword">return</span> d[predictedVariable]; });
	
	<span class="hljs-keyword">var</span> slidersDiv = d3.select(<span class="hljs-string">"#plot"</span>).append(<span class="hljs-string">"div"</span>)
	.style(<span class="hljs-string">"float"</span>, <span class="hljs-string">"right"</span>);
	
	slidersDiv
	.append(<span class="hljs-string">"div"</span>).text(<span class="hljs-string">"Intercept"</span>)
	.append(<span class="hljs-string">"div"</span>)
	.append(<span class="hljs-string">"input"</span>).attr(<span class="hljs-string">"type"</span>, <span class="hljs-string">"range"</span>).attr(<span class="hljs-string">"class"</span>, <span class="hljs-string">"slider"</span>)
	.attr(<span class="hljs-string">"min"</span>, model.intercept - <span class="hljs-number">300</span>)
	.attr(<span class="hljs-string">"max"</span>, model.intercept + <span class="hljs-number">300</span>).attr(<span class="hljs-string">"step"</span>, <span class="hljs-number">2</span>)
	.attr(<span class="hljs-string">"value"</span>, model.intercept)
	.on(<span class="hljs-string">"input"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
		model.intercept = <span class="hljs-built_in">Number</span>(<span class="hljs-keyword">this</span>.value);
		display();
	});
	
	inputVariables.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">variable</span>) </span>{
		variableMean[variable] = d3.mean(points, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>{ <span class="hljs-keyword">return</span> d[variable]; });
		variableStdDev[variable] = d3.deviation(points, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>{ <span class="hljs-keyword">return</span> d[variable]; });
		
		<span class="hljs-keyword">var</span> varMin = <span class="hljs-number">-30</span> / variableStdDev[variable];
		<span class="hljs-keyword">var</span> varMax = <span class="hljs-number">30</span> / variableStdDev[variable];
		<span class="hljs-keyword">var</span> step = (varMax - varMin) / <span class="hljs-number">100</span>;
		slidersDiv
		.append(<span class="hljs-string">"div"</span>).text(variable)
		.append(<span class="hljs-string">"div"</span>)
		.append(<span class="hljs-string">"input"</span>).attr(<span class="hljs-string">"type"</span>, <span class="hljs-string">"range"</span>).attr(<span class="hljs-string">"class"</span>, <span class="hljs-string">"slider"</span>)
		.attr(<span class="hljs-string">"min"</span>, varMin).attr(<span class="hljs-string">"max"</span>, varMax).attr(<span class="hljs-string">"step"</span>, step).attr(<span class="hljs-string">"value"</span>, model[variable])
		.on(<span class="hljs-string">"input"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
			model[variable] = <span class="hljs-built_in">Number</span>(<span class="hljs-keyword">this</span>.value);
			display();
		});
	});
	
	display();
});

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">display</span>(<span class="hljs-params"></span>) </span>{
	calculateErrors(points, model);

	<span class="hljs-keyword">var</span> circles = svg.selectAll(<span class="hljs-string">"circle"</span>).data(points);
	
	circles.enter()
	.append(<span class="hljs-string">"circle"</span>)
	.merge(circles)
	.attr(<span class="hljs-string">"r"</span>, <span class="hljs-number">5</span>)
	.on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>{
		label.attr(<span class="hljs-string">"x"</span>, xScale(d[<span class="hljs-string">"prediction"</span>]))
		.attr(<span class="hljs-string">"y"</span>, yScale(d[predictedVariable]))
		.text(d.Country);
	})
	.style(<span class="hljs-string">"opacity"</span>, <span class="hljs-number">0.4</span>)
	.attr(<span class="hljs-string">"cx"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>{ <span class="hljs-keyword">return</span> xScale(d[<span class="hljs-string">"prediction"</span>]); })
	.attr(<span class="hljs-string">"cy"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>{ <span class="hljs-keyword">return</span> yScale(d[predictedVariable]); });

	modelText
	.text(<span class="hljs-string">"Squared Error: "</span> + rounder(lossFunction()));	
}

</span></code></pre>


<script>
document.getElementById("display").innerText = document.getElementById("notes").innerText;
hljs.initHighlightingOnLoad();
</script>




</ul></body></html>